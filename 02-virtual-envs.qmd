# **Getting Started: Setting Up a Virtual Environment and Installing Packages**

---

```{r}
knitr::include_url("https://calmcode.io/course/virtualenv/intro", height = 1000)
```

In this section, we will cover the essential steps to set up your Python development environment. Setting up a virtual environment ensures that your projects are isolated, allowing you to manage dependencies effectively without affecting your global Python installation. This is particularly important for maintaining a clean and conflict-free workspace.

#### **1. Setting Up a Virtual Environment with `venv`**

A virtual environment in Python is an isolated environment that allows you to install packages and dependencies specific to your project without interfering with other projects or the global Python installation.

##### **1.1 Setting Up on MacOS**

Follow these steps to create and activate a virtual environment on MacOS:

1. **Open Terminal:**  
   Start by opening the Terminal application on your Mac.

2. **Navigate to Your Project Directory:**  
   Use the `cd` command to navigate to the directory where you want to create your project.

   ```bash
   cd path/to/your/project-directory
   ```

3. **Create a Virtual Environment:**  
   Use the following command to create a virtual environment. Replace `myenv` with the name you want for your virtual environment.

   ```bash
   python3 -m venv myenv
   ```

4. **Activate the Virtual Environment:**  
   After creating the virtual environment, you need to activate it. Run the following command:

   ```bash
   source myenv/bin/activate
   ```

   Once activated, you’ll see the name of your virtual environment (e.g., `(myenv)`) appear at the beginning of your command line prompt, indicating that the environment is active.

5. **Deactivate the Virtual Environment:**  
   When you are done working in the virtual environment, deactivate it by running:

   ```bash
   deactivate
   ```

##### **1.2 Setting Up on Windows**

For Windows users, the process is slightly different:

1. **Open Command Prompt or PowerShell:**  
   You can use either Command Prompt or PowerShell to set up your virtual environment.

2. **Navigate to Your Project Directory:**  
   Use the `cd` command to navigate to your project directory.

   ```cmd
   cd path\to\your\project-directory
   ```

3. **Create a Virtual Environment:**  
   Create a virtual environment using the following command. Replace `myenv` with your chosen environment name.

   ```cmd
   python -m venv myenv
   ```

4. **Activate the Virtual Environment:**  
   To activate the virtual environment, run:

   - **For Command Prompt:**

     ```cmd
     myenv\Scripts\activate
     ```

   - **For PowerShell:**

     ```powershell
     .\myenv\Scripts\Activate.ps1
     ```

   After activation, you should see `(myenv)` at the beginning of your prompt, indicating that the virtual environment is active.

5. **Deactivate the Virtual Environment:**  
   To deactivate the environment when you are done, simply run:

   ```cmd
   deactivate
   ```

---

::: {.callout-tip}
## Tip: Virtual Environment
Setting up a virtual environment ensures that your project dependencies are isolated and easy to manage. This isolation prevents conflicts between different projects and keeps your global Python environment clean.
:::

::: {.callout-warning}
**Warning:** Always remember to activate your virtual environment before installing any packages to ensure they are installed within the environment and not globally.
:::

---

#### **2. Installing Packages with `pip`**

Once your virtual environment is activated, you can install the necessary packages using `pip`, Python's package manager. We’ll start by installing two essential libraries for web scraping: `requests` and `BeautifulSoup4`.

##### **2.1 Installing Packages**

1. **Ensure Your Virtual Environment is Activated:**  
   Before installing any packages, make sure your virtual environment is active. If you see `(myenv)` at the beginning of your command line, you’re good to go.

2. **Install `requests` and `BeautifulSoup4`:**  
   Use the following command to install both packages:

   ```bash
   pip install requests beautifulsoup4
   ```

   This command tells `pip` to download and install the `requests` library, which allows you to send HTTP requests, and `BeautifulSoup4`, a library for parsing HTML and XML documents.

3. **Verify the Installation:**  
   After installation, you can verify that the packages were installed correctly by listing the installed packages:

   ```bash
   pip list
   ```

   You should see `requests` and `beautifulsoup4` in the list of installed packages.

##### **2.2 Installing Specific Versions of Packages**

If you need to install a specific version of a package, you can specify the version number:

```bash
pip install requests==2.26.0
```

This command will install version 2.26.0 of the `requests` package. Specifying versions can be useful when working on projects that require a particular version of a library.

##### **2.3 Freezing Requirements**

To make it easier to recreate the same environment later or share with others, you can "freeze" your environment’s current state to a `requirements.txt` file:

```bash
pip freeze > requirements.txt
```

This file lists all the packages and their versions currently installed in your environment. Later, you or someone else can recreate the same environment by running:

```bash
pip install -r requirements.txt
```

---

::: {.callout-note}
**Note:** Keeping your `requirements.txt` file up to date ensures that others can easily set up an identical environment for your project.
:::

---

With your virtual environment set up and the necessary packages installed, you’re ready to start working on your web scraping project. In the next section, we’ll begin by scraping data from a simple webpage, `example.com`, and exploring how to use tools like SelectorGadget to identify the elements you need.

